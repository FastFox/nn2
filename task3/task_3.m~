function task_3()
    load digits;
    func = 'linear';
    %Confusion matrices
    cm = zeros(10);
    cm2 = zeros(10);
    
    options = foptions;
    options(1) = 1;
    options(14)= 10;
    
    target = zeros(size(trainingd,2),10);
    output_training = zeros(size(trainingd,2),10);
    output_test = zeros(size(testdatad,2),10);
    size(target)
    size(training)
    for d=1:10
        disp(['Digit:' num2str(d)]);
        %Create the target vector from training data
        for j = 1:size(target,1)
            if trainingd(j) == d-1
                target(j, d) = 1;
            end
        end        
        %Create the net
        net = mlp(256,100,10,func);
        %Train the nets
        net = mlptrain(net, training', target(:,d), 100);
        %Test errors on training
        output_training(:,d) = mlpfwd(net, training');
        for e=1:1707
            if round(output_training(e,d))==1 && trainingd(e)==d-1
                cm(d,d) = cm(d,d) + 1;
            else
                cm(trainingd(e)+1,d) = cm(trainingd(e)+1,d);
            end
        end       
        %Test errors on testset
        output_test(:,d) = glmfwd(net, testdata');
        round(output_test(:,d))
        for e=1:1000
            if round(output_test(e,d))==1 && testdatad(e)==d-1
                cm2(d,d) = cm2(d,d) + 1;
            else
                cm2(testdatad(e)+1,d) = cm2(testdatad(e)+1,d);
            end
        end
        
        disp(['Percentage correct: ' num2str(size(nonzeros(target(:,d)==round(output_training(:,d))),1)/size(target(:,d),1))]);
    end  
    cm
    cm2
    
end